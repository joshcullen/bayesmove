% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/segmentation_helper_functions.R
\name{plot_heatmap}
\alias{plot_heatmap}
\title{Plot breakpoints over a time series heatmap of the movement variables}
\usage{
plot_heatmap(data, nbins, brkpts, title, legend)
}
\arguments{
\item{data}{A list where each element stores a data frame for a given animal
ID. Each of these data frames contain only columns for the ID and each of
the movement variables that were analyzed by
\code{\link{segment_behavior}}. The ID column must be first.}

\item{nbins}{numeric. A vector of the number of bins used to discretize each
movement variable. These must be in the same order as the columns within
\code{data}.}

\item{brkpts}{A data frame that contains the breakpoints associated with each
animal ID. This data frame is returned by \code{\link{get_breakpts}}.}

\item{title}{logical. If \code{TRUE}, includes the animal ID as the title of
the plot.}

\item{legend}{logical. If \code{TRUE}, shows the legend for the heatmap.}
}
\value{
A heatmap per animal ID that shows the value of each movement
  variable over time (as discretized into bins) and is overlayed by the
  extracted breakpoints.
}
\description{
Visualize the breakpoints estimated by the segmentation model as they relate
to the discretized data on which the model was performed. These plots assist
in determining whether too many or too few breakpoints were estimated as well
as whether the user needs to redefine how they discretized their data before
analysis.
}
\examples{

\donttest{
#simulate data
step<- rgamma(1000, c(1, 2.5, 10), c(1, 1, 1))
angle<- runif(1000, -pi, pi)
date<- seq(c(ISOdate(2020, 6, 17, tz = "UTC")), by = "hour", length.out = 1000)
date<- date + lubridate::seconds(runif(length(date), -15, 15))  #introduce noise
dt<- as.numeric(diff(date)) * 60  #convert time difference to seconds
dt<- c(dt, NA)
var<- rep(sample(c(1,2), 100, replace = TRUE), each = 10)
id<- rep(1:10, each = 100)


#create data frame and round time
dat<- data.frame(id, date, dt, step, angle, var)
dat<- round_track_time(dat = dat, id = "id", int = 3600, tol = 15, time.zone = "UTC")


#define limits for each bin
dist.lims<- c(quantile(step, c(0, 0.25, 0.5, 0.75, 0.95)), max(step))  #5 bins
angle.lims<- c(-pi, -3*pi/4, -pi/2, -pi/4, 0, pi/4, pi/2, 3*pi/4, pi)  #8 bins

#discretize step and angle
dat1<- discrete_move_var(dat = dat, lims = list(dist.lims, angle.lims),
                         varIn = c("step", "angle"),
                         varOut = c("SL","TA"))


#create list and filter by primary time step
dat.list<- df_to_list(dat = dat1, ind = "id")
dat.list.filt<- filter_time(dat.list = dat.list, int = 3600)
dat.list.filt1<- lapply(dat.list.filt,
                        function(x) subset(x, select = c(id, SL, TA)))


#simulate breakpoints
brkpts<- rep(sort(sample(1:65, 7, replace = TRUE)), 10)
brkpts<- matrix(brkpts, 10, 7, byrow = TRUE)
brkpts<- data.frame(id = 1:10, brkpts)


#run function
plot_heatmap(data = dat.list.filt1, nbins = c(5,8), brkpts = brkpts,
             title = TRUE, legend = TRUE)
}

}
